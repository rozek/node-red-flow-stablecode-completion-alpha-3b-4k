[
    {
        "id": "aebe164cefe0ad4e",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": "Stablecode-Completion-Alpha-3B-4K Tokenization",
        "info": "",
        "x": 870,
        "y": 360,
        "wires": []
    },
    {
        "id": "72a30142dae355c7",
        "type": "http in",
        "z": "706bdd3f3f20c07c",
        "name": "[get] /stablecode-tokenization",
        "url": "/stablecode-tokenization",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 800,
        "y": 420,
        "wires": [
            [
                "460520061e41868f"
            ]
        ]
    },
    {
        "id": "19c0961363546fe5",
        "type": "function",
        "z": "706bdd3f3f20c07c",
        "name": "StableCode Tokenization",
        "func": "(async () => {\n  let Prompt = (msg.payload || '').trim()\n  if (Prompt === '') {\n    msg.payload = 'empty or missing prompt'\n    node.send([null,msg])\n    node.done()\n    return\n  }\n\n/**** retrieve settings or provide defaults ****/\n\n  let Threads = parseInt(msg.threads,10)\n  if (isNaN(Threads)) { Threads = 4 }\n    Threads = Math.max(1,Threads)\n    Threads = Math.min(Threads,Math.max(1,os.cpus().length))\n\n  let ContextLength = parseInt(msg.context,10)\n  if (isNaN(ContextLength)) { ContextLength = 512 }\n    ContextLength = Math.max(0,Math.min(ContextLength,4096))\n\n  Prompt = Prompt.replace(/\"/g,'\\\\\"')\n\n/**** retrieve UserDir - crash if not a folder ****/\n\n  let UserDir = (global.get('UserDir') || '').trim()\n  if (UserDir === '') { UserDir = process.env.HOME + '/.node-red' }\n\n  if (! fs.statSync(UserDir,{ throwIfNoEntry:false })?.isDirectory()) {\n    throw new Error(\n      'the given \"UserDir\" (\"' + UserDir + '\") is either missing or ' +\n      'not a folder - exiting'\n    )\n  }\n\n/**** combine all these settings into a command ****/\n\n  const Command = (\n    './gpt-neox --model ./stablecode-completion-alpha-3b-4k.ggmlv1.q8_0.bin ' +\n    ' --context ' + ContextLength +\n    ' --n_predict 0' +\n    ' --threads ' + Threads +\n    ' --prompt \"' + encoded(Prompt) + '\"'\n  )\n  const Options = {\n    cwd:UserDir\n  }\n\n/**** extract actual reponse from command output ****/\n\n  function ResponseFrom (Text) {\n    const HeaderLength = Text.indexOf('\\nmain: token[0]')\n    Text = Text.slice(HeaderLength + 1)\n\n    const TrailerIndex = Text.indexOf('\\n\\n')\n    Text = Text.slice(0,TrailerIndex)\n\n    return Text.replace(/^main: token\\[%d+\\] =%s+/g,'')\n  }\n\n/**** now infer a response from the given prompt ****/\n\n  node.status({ fill:'yellow', shape:'ring', text:'running' })\n\n  const ShellProcess = child_process.exec(Command,Options)\n    let stdout = ''\n    for await (const Chunk of ShellProcess.stdout) {\n      stdout += Chunk\n    }\n\n    let stderr = ''\n    for await (const Chunk of ShellProcess.stderr) {\n      stderr += Chunk\n    }\n\n    const ExitCode = (await new Promise((resolve) => {\n      ShellProcess.on('close', resolve)\n    })) || 0\n  if (ExitCode !== 0) {\n    node.status({ fill:'red', shape:'dot', text:'ExitCode = ' + ExitCode })\n\n    msg.statusCode = 500 + ExitCode\n    msg.payload    = stderr\n  } else {\n    node.status({ fill:'green', shape:'dot', text:'finished' })\n\n    stdout = stdout.trim()\n\n    msg.statusCode = (stdout === '' ? 204 : 200)\n    msg.payload    = ResponseFrom(stdout)\n  }\n\n  node.send([msg,null])\n  node.done()\n\n/**** encoded ****/\n\n  function encoded (Text) {\n    return Text.replace(/'/g,\"'\\\"'\\\"'\")\n  }\n})()\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "os",
                "module": "os"
            },
            {
                "var": "child_process",
                "module": "child_process"
            },
            {
                "var": "fs",
                "module": "fs"
            },
            {
                "var": "process",
                "module": "process"
            }
        ],
        "x": 990,
        "y": 480,
        "wires": [
            [
                "50a5cbbc190b4a27",
                "02d2adcb13b846f9"
            ],
            [
                "5680adcb011b479e"
            ]
        ],
        "outputLabels": [
            "on success",
            "on failure"
        ]
    },
    {
        "id": "2bc9d4421608d650",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Prompt: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 540,
        "wires": []
    },
    {
        "id": "09fea8a3c36acf94",
        "type": "http response",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1190,
        "y": 420,
        "wires": []
    },
    {
        "id": "5680adcb011b479e",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "400",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "400",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 520,
        "wires": [
            [
                "09fea8a3c36acf94"
            ]
        ]
    },
    {
        "id": "50a5cbbc190b4a27",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "200",
        "rules": [
            {
                "t": "set",
                "p": "statusCode",
                "pt": "msg",
                "to": "200",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1190,
        "y": 480,
        "wires": [
            [
                "09fea8a3c36acf94"
            ]
        ]
    },
    {
        "id": "02d2adcb13b846f9",
        "type": "debug",
        "z": "706bdd3f3f20c07c",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "'Response: \"' & msg.payload & '\"'",
        "targetType": "jsonata",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 560,
        "wires": []
    },
    {
        "id": "460520061e41868f",
        "type": "change",
        "z": "706bdd3f3f20c07c",
        "name": "parse query",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "req.query.prompt",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "threads",
                "pt": "msg",
                "to": "req.query.threads",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "model",
                "pt": "msg",
                "to": "req.query.model",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "context",
                "pt": "msg",
                "to": "req.query.context",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 790,
        "y": 480,
        "wires": [
            [
                "2bc9d4421608d650",
                "19c0961363546fe5"
            ]
        ]
    },
    {
        "id": "17a43bc0a9d59c3d",
        "type": "comment",
        "z": "706bdd3f3f20c07c",
        "name": "cwd = UserDir",
        "info": "",
        "x": 1170,
        "y": 360,
        "wires": []
    }
]